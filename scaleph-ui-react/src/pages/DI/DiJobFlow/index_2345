import { selectJobById } from '@/services/project/job.service';
import { DiJob } from '@/services/project/typings';
import { CloseOutlined } from '@ant-design/icons';
import { IAppLoad, NsGraph } from '@antv/xflow';
import { Button, Drawer, Popover, Space, Tag, Tooltip } from 'antd';
import { useState } from 'react';
import { useIntl } from 'umi';
import { configGraph, configToolbar } from './variables';
interface DiJobFlowPorps {
  visible: boolean;
  data: DiJob;
  onVisibleChange: (visible: boolean, data: any) => void;
  onCancel: () => void;
}

const DiJobFlow: React.FC<DiJobFlowPorps> = ({ visible, data, onVisibleChange, onCancel }) => {
  const intl = useIntl();
  // const access = useAccess();
  const [jobInfo, setJobInfo] = useState<DiJob>({});
  const graphConfig = configGraph({});
  const toolbarConfig = configToolbar({});
  const [graphData, setGraphData] = useState<NsGraph.IGraphData>();

  // useEffect(() => {
  //   console.log(data);
  //   refreshGraph();
  // }, []);

  const refreshGraph = () => {
    selectJobById(data.id as number).then((d) => {
      setJobInfo(d);
    });
  };

  const onGraphLoad: IAppLoad = async (app) => {
    console.log(app);
    //graph instance
    const graph = await app.getGraphInstance();
    //todo set graph data
    //todo init graph
    //todo event listener
  };
  return (
    <>
      <Drawer
        title={
          <Space>
            <Popover
              content={
                <>
                  <p>
                    {intl.formatMessage({ id: 'pages.project.di.jobName' }) +
                      ' : ' +
                      jobInfo.jobName}
                  </p>
                  <p>
                    {intl.formatMessage({ id: 'pages.project.di.jobStatus' }) +
                      ' : ' +
                      jobInfo.jobStatus?.label}
                  </p>
                  <p>
                    {intl.formatMessage({ id: 'pages.project.di.jobVersion' }) +
                      ' : ' +
                      jobInfo.jobVersion}
                  </p>
                  <p>
                    {intl.formatMessage({ id: 'pages.project.di.createTime' }) +
                      ' : ' +
                      jobInfo.createTime}
                  </p>
                  <p>
                    {intl.formatMessage({ id: 'pages.project.di.updateTime' }) +
                      ' : ' +
                      jobInfo.updateTime}
                  </p>
                </>
              }
              title={false}
              placement="bottom"
              trigger="hover"
            >
              <Tag color="blue">
                {intl.formatMessage({ id: 'pages.project.di.job.batch' }) + ' : ' + jobInfo.jobCode}
              </Tag>
            </Popover>
          </Space>
        }
        bodyStyle={{ padding: '0px' }}
        placement="top"
        width="100%"
        height="100%"
        closable={false}
        open={visible}
        onClose={onCancel}
        extra={
          <Space>
            <Tooltip title={intl.formatMessage({ id: 'app.common.operate.close.label' })}></Tooltip>
            <Button
              shape="default"
              type="text"
              icon={<CloseOutlined />}
              onClick={onCancel}
            ></Button>
          </Space>
        }
      >
        {/* <Row>
          <Col span={24}>
            <XFlow
              className={styles.xflowWorkspace}
              isAutoCenter={true}
              graphData={graphData}
              graphLayout={graphLayout}
              onLoad={onGraphLoad}
            >
              <CanvasToolbar
                layout="horizontal"
                position={{ top: 0, left: 0, right: 0, height: 40 }}
                config={toolbarConfig}
              ></CanvasToolbar>
              <XFlowCanvas
                config={graphConfig}
                position={{ top: 40, bottom: 0, left: 0, right: 0 }}
              ></XFlowCanvas>
            </XFlow>
          </Col>
        </Row> */}
      </Drawer>
    </>
  );
};

export default DiJobFlow;
