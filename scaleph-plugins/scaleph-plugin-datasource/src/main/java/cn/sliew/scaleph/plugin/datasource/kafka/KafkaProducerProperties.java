package cn.sliew.scaleph.plugin.datasource.kafka;

import cn.sliew.scaleph.plugin.framework.property.AllowableValue;
import cn.sliew.scaleph.plugin.framework.property.Property;
import cn.sliew.scaleph.plugin.framework.property.PropertyDescriptor;
import org.apache.kafka.clients.producer.ProducerConfig;

public enum KafkaProducerProperties {
    ;

    public static final AllowableValue DELIVERY_REPLICATED =
        new AllowableValue("all", "Guarantee Replicated Delivery",
            "FlowFile will be routed to failure unless the message is replicated to the appropriate "
                + "number of Kafka Nodes according to the Topic configuration");
    public static final AllowableValue DELIVERY_ONE_NODE =
        new AllowableValue("1", "Guarantee Single Node Delivery",
            "FlowFile will be routed to success if the message is received by a single Kafka node, "
                +
                "whether or not it is replicated. This is faster than <Guarantee Replicated Delivery> "
                + "but can result in data loss if a Kafka node crashes");
    public static final AllowableValue DELIVERY_BEST_EFFORT = new AllowableValue("0", "Best Effort",
        "FlowFile will be routed to success after successfully sending the content to a Kafka node, "
            +
            "without waiting for any acknowledgment from the node at all. This provides the best performance but may result in data loss.");

    public static final PropertyDescriptor DELIVERY_GUARANTEE = new PropertyDescriptor.Builder()
        .name(ProducerConfig.ACKS_CONFIG)
        .description(
            "Specifies the requirement for guaranteeing that a message is sent to Kafka. Corresponds to Kafka's 'acks' property.")
        .defaultValue(descriptor -> DELIVERY_REPLICATED.getValue())
        .allowableValues(DELIVERY_BEST_EFFORT, DELIVERY_ONE_NODE, DELIVERY_REPLICATED)
        .properties(Property.Required)
        .validateAndBuild();

    public static final PropertyDescriptor METADATA_WAIT_TIME = new PropertyDescriptor.Builder()
        .name(ProducerConfig.MAX_BLOCK_MS_CONFIG)
        .description(
            "The amount of time publisher will wait to obtain metadata or wait for the buffer to flush during the 'send' call before failing the "
                + "entire 'send' call. Corresponds to Kafka's 'max.block.ms' property")
        .defaultValue(descriptor -> "5 sec")
        .properties(Property.Required)
        .validateAndBuild();

    public static final PropertyDescriptor ACK_WAIT_TIME = new PropertyDescriptor.Builder()
        .name("ack.wait.time")
        .description(
            "After sending a message to Kafka, this indicates the amount of time that we are willing to wait for a response from Kafka. "
                +
                "If Kafka does not acknowledge the message within this time period, the FlowFile will be routed to 'failure'.")
        .defaultValue(descriptor -> "5 secs")
        .properties(Property.Required)
        .validateAndBuild();

    public static final PropertyDescriptor MAX_REQUEST_SIZE = new PropertyDescriptor.Builder()
        .name(ProducerConfig.MAX_REQUEST_SIZE_CONFIG)
        .description(
            "The maximum size of a request in bytes. Corresponds to Kafka's 'max.request.size' property and defaults to 1 MB (1048576).")
        .defaultValue(descriptor -> "1 MB")
        .properties(Property.Required)
        .validateAndBuild();

    public static final PropertyDescriptor COMPRESSION_CODEC = new PropertyDescriptor.Builder()
        .name(ProducerConfig.COMPRESSION_TYPE_CONFIG)
        .description(
            "This parameter allows you to specify the compression codec for all data generated by this producer.")
        .defaultValue(descriptor -> "none")
        .allowableValues("none", "gzip", "snappy", "lz4")
        .properties(Property.Required)
        .validateAndBuild();
}
